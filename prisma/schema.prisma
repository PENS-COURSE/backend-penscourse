// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  admin
  user
  dosen
}

model User {
  id                   Int                    @id @default(autoincrement())
  name                 String
  email                String                 @unique
  email_verified_at    DateTime?
  google_id            String?                @unique
  password             String
  avatar               String?
  role                 Role
  created_at           DateTime               @default(now())
  updated_at           DateTime               @updatedAt
  lecture              Lecture?
  sessions             SessionLogin[]
  courses              Course[]
  orders               Order[]
  Notification         Notification[]
  Enrollment           Enrollment[]
  ForgotPassword       ForgotPassword?
  SubjectCompletion    SubjectCompletion[]
  QuizSession          QuizSession[]
  ParticipantLiveClass ParticipantLiveClass[]
  UrlSignature         UrlSignature[]
  LiveClass            LiveClass[]
  certificates         Certificate[]
  reviews              Review[]

  @@map("users")
}

model ForgotPassword {
  user_id     Int       @unique
  user        User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  otp         String
  verified_at DateTime?
  expired_at  DateTime
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt

  @@map("forgot_passwords")
}

model Lecture {
  id         Int      @id @default(autoincrement())
  nip        String
  user_id    Int      @unique
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("lectures")
}

model SessionLogin {
  id            Int      @id @default(autoincrement())
  refresh_token String   @unique
  user_id       Int
  user          User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  expired_at    DateTime
  user_agent    String?
  ip_address    String?
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  @@map("session_logins")
}

model Department {
  id                      Int      @id @default(autoincrement())
  name                    String
  slug                    String   @unique
  description             String?  @db.Text
  participant_note        String?  @db.Text
  participant_thumbnail   String?
  benefits_note           String?  @db.Text
  benefits_thumbnail      String?
  opportunities_note      String?  @db.Text
  opportunities_thumbnail String?
  icon                    String?
  courses                 Course[]
  is_active               Boolean  @default(true)
  created_at              DateTime @default(now())
  updated_at              DateTime @updatedAt

  @@map("departments")
}

enum GradeLevel {
  beginner
  intermediate
  advanced
}

model Course {
  id                Int                 @id @default(autoincrement())
  name              String
  slug              String              @unique
  description       String?
  price             Float?
  is_free           Boolean
  is_certified      Boolean             @default(false)
  grade_level       GradeLevel?
  start_date        DateTime?
  end_date          DateTime?
  max_students      Int?
  thumbnail         String?
  department        Department?         @relation(fields: [department_id], references: [id], onDelete: SetNull)
  department_id     Int?
  user_id           Int?
  user              User?               @relation(fields: [user_id], references: [id], onDelete: SetNull)
  is_active         Boolean             @default(true)
  is_completed      Boolean             @default(false)
  completed_at      DateTime?
  created_at        DateTime            @default(now())
  updated_at        DateTime            @updatedAt
  curriculums       Curriculum[]
  orders            Order[]
  enrollments       Enrollment[]
  discount          CourseDiscount?
  SubjectCompletion SubjectCompletion[]
  certificates      Certificate[]
  reviews           Review[]

  @@map("courses")
}

model Curriculum {
  id             String         @id @default(uuid()) @db.Uuid
  slug           String         @unique
  title          String
  description    String?
  course         Course         @relation(fields: [course_id], references: [id], onDelete: Cascade)
  course_id      Int
  week           Int
  created_at     DateTime       @default(now())
  updated_at     DateTime       @updatedAt
  video_contents VideoContent[]
  file_contents  FileContent[]
  live_classes   LiveClass[]
  quizzes        Quiz[]
  Question       Question[]

  @@map("curriculums")
}

model VideoContent {
  id                String              @id @default(uuid()) @db.Uuid
  title             String
  description       String?
  url               String
  duration          String?
  curriculum        Curriculum          @relation(fields: [curriculum_id], references: [id], onDelete: Cascade)
  curriculum_id     String              @db.Uuid
  created_at        DateTime            @default(now())
  updated_at        DateTime            @updatedAt
  SubjectCompletion SubjectCompletion[]

  @@map("video_contents")
}

model FileContent {
  id                String              @id @default(uuid()) @db.Uuid
  title             String
  description       String?
  url               String
  file_type         String
  curriculum        Curriculum          @relation(fields: [curriculum_id], references: [id], onDelete: Cascade)
  curriculum_id     String              @db.Uuid
  created_at        DateTime            @default(now())
  updated_at        DateTime            @updatedAt
  SubjectCompletion SubjectCompletion[]

  @@map("file_contents")
}

enum StatusLiveClass {
  pending
  ongoing
  ended
}

model LiveClass {
  id                   String                 @id @default(uuid()) @db.Uuid
  title                String
  description          String?
  slug                 String                 @unique
  is_open              Boolean                @default(false)
  status               StatusLiveClass        @default(pending)
  curriculum           Curriculum             @relation(fields: [curriculum_id], references: [id], onDelete: Cascade)
  curriculum_id        String                 @db.Uuid
  created_at           DateTime               @default(now())
  updated_at           DateTime               @updatedAt
  room_moderator_id    Int?
  room_moderator       User?                  @relation(fields: [room_moderator_id], references: [id], onDelete: SetNull)
  SubjectCompletion    SubjectCompletion[]
  ParticipantLiveClass ParticipantLiveClass[]
  Recording            Recording[]

  @@map("live_classes")
}

enum RecordingStatus {
  pending
  processing
  success
  failed
}

model Recording {
  id            String          @id @default(uuid()) @db.Uuid
  unique_id     String
  url           String?
  live_class    LiveClass       @relation(fields: [live_class_id], references: [id], onDelete: Cascade)
  live_class_id String          @db.Uuid
  status        RecordingStatus @default(pending)
  created_at    DateTime        @default(now())
  updated_at    DateTime        @updatedAt

  @@map("recordings")
}

model ParticipantLiveClass {
  id             Int              @id @default(autoincrement())
  live_class_id  String           @db.Uuid
  live_class     LiveClass        @relation(fields: [live_class_id], references: [id], onDelete: Cascade)
  user_id        Int
  user           User             @relation(fields: [user_id], references: [id], onDelete: Cascade)
  duration       Int?             @default(0)
  created_at     DateTime         @default(now())
  updated_at     DateTime         @updatedAt
  ParticipantLog ParticipantLog[]

  @@map("participant_live_classes")
}

enum ActivityParticipantType {
  join
  disconnect
}

model ParticipantLog {
  id                        Int                     @id @default(autoincrement())
  participant_live_class_id Int
  participant_live_class    ParticipantLiveClass    @relation(fields: [participant_live_class_id], references: [id], onDelete: Cascade)
  user_agent                String?
  activity_type             ActivityParticipantType
  created_at                DateTime                @default(now())
  updated_at                DateTime                @updatedAt

  @@map("participant_logs")
}

enum PaymentStatusType {
  pending
  expired
  paid
}

model Order {
  id             String            @unique @default(uuid()) @db.Uuid
  user_id        Int
  user           User              @relation(fields: [user_id], references: [id], onDelete: Cascade)
  course_id      Int
  course         Course            @relation(fields: [course_id], references: [id], onDelete: Cascade)
  total_price    Int
  total_discount Int?
  xendit_id      String?
  status         PaymentStatusType @default(pending)
  created_at     DateTime          @default(now())
  updated_at     DateTime          @updatedAt

  @@map("orders")
}

model Enrollment {
  user_id   Int
  user      User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  course_id Int
  course    Course @relation(fields: [course_id], references: [id], onDelete: Cascade)

  @@id([user_id, course_id])
  @@map("enrollments")
}

model CourseDiscount {
  course_id      Int       @unique
  course         Course    @relation(fields: [course_id], references: [id], onDelete: Cascade)
  discount_price Float
  start_date     DateTime?
  end_date       DateTime?
  is_active      Boolean   @default(true)
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt

  @@map("course_discounts")
}

model Notification {
  id          String    @id @default(uuid()) @db.Uuid
  type        String
  title       String
  description String?   @db.Text
  action_id   String?
  user_id     Int
  user        User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  read_at     DateTime?
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt

  @@map("notifications")
}

model SubjectCompletion {
  id               Int           @id @default(autoincrement())
  user_id          Int
  user             User          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  course_id        Int
  course           Course        @relation(fields: [course_id], references: [id], onDelete: Cascade)
  live_class_id    String?       @db.Uuid
  live_class       LiveClass?    @relation(fields: [live_class_id], references: [id], onDelete: Cascade)
  file_content_id  String?       @db.Uuid
  file_content     FileContent?  @relation(fields: [file_content_id], references: [id], onDelete: Cascade)
  video_content_id String?       @db.Uuid
  video_content    VideoContent? @relation(fields: [video_content_id], references: [id], onDelete: Cascade)
  created_at       DateTime      @default(now())
  updated_at       DateTime      @updatedAt

  @@map("subject_completions")
}

model Quiz {
  id               String               @id @default(uuid()) @db.Uuid
  title            String
  description      String?              @db.Text
  duration         Int
  start_date       DateTime?
  end_date         DateTime?
  is_ended         Boolean              @default(false)
  is_active        Boolean              @default(false)
  show_result      Boolean              @default(true)
  pass_grade       Int?
  curriculum       Curriculum           @relation(fields: [curriculum_id], references: [id], onDelete: Cascade)
  curriculum_id    String               @db.Uuid
  created_at       DateTime             @default(now())
  updated_at       DateTime             @updatedAt
  questions        Question[]
  sessions         QuizSession[]
  option_generated QuizOptionGenerated?

  @@map("quizzes")
}

model QuizOptionGenerated {
  quiz_id        String  @db.Uuid
  quiz           Quiz    @relation(fields: [quiz_id], references: [id], onDelete: Cascade)
  easy           Int
  medium         Int
  hard           Int
  all_curriculum Boolean @default(false)
  total_question Int

  @@id([quiz_id])
  @@map("quiz_option_generated")
}

enum QuestionType {
  multiple_choice
  single_choice
}

enum Level {
  easy
  medium
  hard
}

model Question {
  id                   String                 @id @default(uuid()) @db.Uuid
  question             String                 @db.Text
  option_a             String                 @db.Text
  option_b             String                 @db.Text
  option_c             String?                @db.Text
  option_d             String?                @db.Text
  option_e             String?                @db.Text
  question_type        QuestionType
  quiz                 Quiz                   @relation(fields: [quiz_id], references: [id], onDelete: Cascade)
  quiz_id              String                 @db.Uuid
  level                Level
  curriculum_id        String?                @db.Uuid
  curriculum           Curriculum?            @relation(fields: [curriculum_id], references: [id], onDelete: Cascade)
  created_at           DateTime               @default(now())
  updated_at           DateTime               @updatedAt
  answer               QuestionAnswer[]
  QuizEnrolledQuestion QuizEnrolledQuestion[]

  @@map("questions")
}

model QuestionAnswer {
  id          String   @id @default(uuid()) @db.Uuid
  question_id String   @db.Uuid
  question    Question @relation(fields: [question_id], references: [id], onDelete: Cascade)
  answer      String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@map("question_answers")
}

model QuizSession {
  id         String                 @id @default(uuid()) @db.Uuid
  user_id    Int
  user       User                   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  quiz_id    String                 @db.Uuid
  quiz       Quiz                   @relation(fields: [quiz_id], references: [id], onDelete: Cascade)
  score      Int?
  is_ended   Boolean                @default(false)
  created_at DateTime               @default(now())
  updated_at DateTime               @updatedAt
  questions  QuizEnrolledQuestion[]

  @@map("quiz_sessions")
}

model QuizEnrolledQuestion {
  quiz_session    QuizSession @relation(fields: [quiz_session_id], references: [id], onDelete: Cascade)
  quiz_session_id String      @db.Uuid
  question        Question    @relation(fields: [question_id], references: [id], onDelete: Cascade)
  question_id     String      @db.Uuid
  answer          String[]

  @@id([quiz_session_id, question_id])
  @@map("session_questions")
}

model UrlSignature {
  id         String   @id @default(uuid()) @db.Uuid
  data       Json
  is_used    Boolean  @default(false)
  user_id    Int?
  user       User?    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  expired_at DateTime
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("url_signatures")
}

model Banner {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  image_url   String
  url         String?
  is_active   Boolean  @default(true)
  order       Int
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@map("banners")
}

enum CertificateType {
  competence
  presence
}

model Certificate {
  id                    Int                @id @default(autoincrement())
  uuid                  String             @unique @default(uuid())
  no_cert               String
  user_id               Int
  user                  User               @relation(fields: [user_id], references: [id], onDelete: Cascade)
  course_id             Int?
  course                Course?            @relation(fields: [course_id], references: [id], onDelete: SetNull)
  type                  CertificateType
  certificate_url       String?
  certificate_thumbnail String?
  total_duration        Int?
  created_at            DateTime           @default(now())
  updated_at            DateTime           @updatedAt
  CertificateScore      CertificateScore[]

  @@index([no_cert, uuid])
  @@map("certificates")
}

enum QuizType {
  final
  daily
}

model CertificateScore {
  id             Int         @id @default(autoincrement())
  certificate_id Int
  certificate    Certificate @relation(fields: [certificate_id], references: [id], onDelete: Cascade)
  quiz_type      QuizType
  score          Int
  created_at     DateTime    @default(now())
  updated_at     DateTime    @updatedAt

  @@map("certificate_scores")
}

model Review {
  id         Int      @id @default(autoincrement())
  user_id    Int
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  course_id  Int
  course     Course   @relation(fields: [course_id], references: [id], onDelete: Cascade)
  rating     Int
  review     String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("reviews")
}

model Logo {
  id         Int      @id @default(autoincrement())
  title      String
  filename   String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("logos")
}

model DynamicConfigurations {
  id                         Int                          @id @default(autoincrement())
  slug                       String                       @unique
  title                      String
  description                String?
  can_delete                 Boolean                      @default(true)
  created_at                 DateTime                     @default(now())
  updated_at                 DateTime                     @updatedAt
  DynamicConfigurationValues DynamicConfigurationValues[]

  @@index([title])
  @@map("dynamic_configurations")
}

enum DynamicConfigurationType {
  string
  number
  boolean
}

model DynamicConfigurationValues {
  id                       Int                      @id @default(autoincrement())
  dynamic_configuration_id Int
  dynamic_configuration    DynamicConfigurations    @relation(fields: [dynamic_configuration_id], references: [id], onDelete: Cascade)
  key                      String
  value                    String
  type                     DynamicConfigurationType
  can_delete               Boolean                  @default(true)
  created_at               DateTime                 @default(now())
  updated_at               DateTime                 @updatedAt

  @@map("dynamic_configuration_values")
}
